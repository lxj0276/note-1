* abstract members
  Besides methods, you can also declare abstract fields and even abstract types as members of classes and traits.
  In this chapter we'll describe all for kinds of abstract member: vals, vars, methods, and types.
  Along the way we'll discuss pre-initialized fields, lazy vals, path-dependent types, and enumerations.

  Trait declares one of each kind of abstract member and its extends.

  #+BEGIN_SRC scala
    trait Abs {
      type T
      def transform(x: T): T
      val initial: T
      var current: T
    }
    
    class Concrete extends Abs {
      type T = String
      def transform(x: String) = x + x
      val initial = "hi"
      var current = initial
    }
  #+END_SRC
** type members
  An abstract type in scala is always a member of some class or trait, such as type T in trait Abstract.
  One reason to use a type member is to define a short, descriptive alias for a type whose real name is more verbose, or less obvious in meaning , than the alias.
  The Other main use of type members is to declare abstract type that must be defined in subclass.
** abstract vals
   It gives a name and type for a val, but not its value.
   And this value has to be provided by a concrete val definition in a subclass.

   #+BEGIN_SRC scala
     // define an abstract val
     val initial: String
     
     // define an abstract parameterless method
     def initial: String
   #+END_SRC

   Any implementation of /val/ must be a /val/ definition, it may not be a /var/ or /def/.
   But abstract method declarations, may be implemented by both concrete method /def/ definitions and concrete /val/ definitions.
   Examples:

   #+BEGIN_SRC scala
     abstract class Fruit {
       val v: String  // v for value
       val m: String  // m for method 
     }
     
     abstract class Apple extends Fruit {
       val v: String
       val m: String // OK to override a 'def' with a 'val'
     }
     
     abstract class BadApple extends Fruit {
       def v: String // ERROR: cannot override a 'val' with a 'def'
       def m: String
     }
   #+END_SRC
** abstract vars 
   Vars declared as members of classes come equipped with getter and setter methods.
   This holds for abstract vars as well.
   If you declare an abstract var named hour, you implicitly declare an abstract getter method, hour, and an abstract setter method, hour_=.

   #+BEGIN_SRC scala
     trait AbstractTime {
       var hour: Int
       var minute: Int
     }
     
     // the definition of abstractTime up is exactly equivalent to the definition shown in below
     trait AbstractTime {
       def hour: Int          // getter for `hour'
       def hour_=(x: Int)     // setter for `hour'
       def minute: Int        // getter for `minute'
       def minute_=(x: Int)   // setter for `minute'
     }
     
   #+END_SRC
** Initializing abstract vals
   Abstract vals let you provide details in a subclass that are missing in a superclass, this is particularly important for tarits, because traits don't have a constructor to which you could pass parameters.

   #+BEGIN_SRC scala
     trait RationalTrait {
       val numerArg: Int
       val denomArg: Int
       require(denomArg != 0)
       private val g = gcd(numerArg, denomArg)
       val numer = numerArg / g
       val denom = denomArg / g
       private def gcd(a: Int, b: Int): Int =
         if (b == 0) a else gcd(b, a % b)
       override def toString = numer +"/"+ denom
     }
   #+END_SRC
If you try to instantiate this trait with some numerator and denominator
expressions that are not simple literals, you’ll get an exception:

#+BEGIN_SRC scala
  scala> new RationalTrait {
    val numerArg = 1 * x
    val denomArg = 2 * x
  }
  java.lang.IllegalArgumentException: requirement failed
  at scala.Predef$.require(Predef.scala:134)
  at RationalTrait$class.$init$(<console>:8)
  at $anon$1.<init>(<console>:8)
    ...
#+END_SRC
The exception in this example was thrown because denomArg still had its
default value of 0 when class RationalTrait was initialized, which caused
the require invocation to fail.

In fact, Scala offers two alternative solu-
tions to this problem, pre-initialized fields and lazy val s.
*** Pre-initialized fields
    simply place the field definition in braces before the superclass constructor call.

    #+BEGIN_SRC scala
      scala> new {
      val numerArg = 1 * x
      val denomArg = 2 * x
      } with RationalTrait
      res1: java.lang.Object with RationalTrait = 1/2
    #+END_SRC

    #+BEGIN_SRC scala
      class RationalClass(n: Int, d: Int) extends {
      val numerArg = n
      val denomArg = d
      } with RationalTrait {
      def + (that: RationalClass) = new RationalClass(
      numer * that.denom + that.numer * denom,
      denom * that.denom
      )
      }
    #+END_SRC

*** Lazy vals

     #+BEGIN_SRC scala
       scala> object Demo {
       val x = { println("initializing x"); "done" }
       }
       defined module Demo
       Now, first refer to Demo , then to Demo.x :
       scala> Demo
       initializing x
       res3: Demo.type = Demo$@17469af
       scala> Demo.x
       res4: java.lang.String = done
     #+END_SRC
Compare the up and the blow source code. They are initializing in the diffrent location.
     #+BEGIN_SRC scala
       scala> object Demo {
       lazy val x = { println("initializing x"); "done" }
       }
       defined module Demo
       scala> Demo
       res5: Demo.type = Demo$@11dda2d
       scala> Demo.x
       initializing x
       res6: java.lang.String = done
     #+END_SRC

#+BEGIN_SRC scala
  trait LazyRationalTrait {
    val numerArg: Int
    val denomArg: Int
    lazy val numer = numerArg / g
    lazy val denom = denomArg / g
    override def toString = numer +"/"+ denom
    private lazy val g = {
      require(denomArg != 0)
      gcd(numerArg, denomArg)
    }
    private def gcd(a: Int, b: Int): Int =
      if (b == 0) a else gcd(b, a % b)
  }


scala> val x = 2
  x: Int = 2

scala> new LazyRationalTrait {
   |   val numerArg = 1 * x
   |   val denomArg = 2 * x
   | }
res1: java.lang.Object with LazyRationalTrait = 1/2
#+END_SRC
** Abstract types
   The rest of this chapter discusses what such an abstract type declaration means and what it’s good for.
   Here is a well-known example where abstract types show up naturally.

   #+BEGIN_SRC scala
     class Food
     abstract class Animal {
       def eat(food: Food)
     }
     
       class Grass extends Food
       class Cow extends Animal {
         override def eat(food: Grass) {} // This won't compile
       }
     
       BuggyAnimals.scala:7: error: class Cow needs to be
       abstract, since method eat in class Animal of type
           (Food)Unit is not defined
       class Cow extends Animal {
             ^
       BuggyAnimals.scala:8: error: method eat overrides nothing
         override def eat(food: Grass) {}
                 ^
   #+END_SRC
   Animal s do eat Food , but what kind of Food each Animal eats depends on the Animal . This can be neatly expressed with an abstract type.

   #+BEGIN_SRC scala
     class Food
     abstract class Animal {
         type SuitableFood <: Food
         def eat(food: SuitableFood)
     }
     
     class Grass extends Food
     class Cow extends Animal {
         type SuitableFood = Grass
         override def eat(food: Grass) {}
     }
   #+END_SRC
** Path-dependent types
   #+BEGIN_SRC scala
       scala> class Fish extends Food
       defined class Fish
     
       scala> val bessy: Animal = new Cow
       bessy: Animal = Cow@674bf6
     
       scala> bessy eat (new Fish)
       <console>:10: error: type mismatch;
        found   : Fish
        required: bessy.SuitableFood
              bessy eat (new Fish)
                         ^
   #+END_SRC
   A type like bessy.SuitableFood is called a /path-dependent type/.
   The word “path” here means a reference to an object. It could be a single name, such as bessy , or a longer access path, such as farm.barn.bessy.SuitableFood , where each of farm , barn , and bessy are variables (or singleton object names) that refer to objects.
   A path-dependent type resembles the syntax for an inner class type in Java, but there is a crucial difference: a path-dependent type names an outer object, whereas an inner class type names an outer class.
   Java-style inner class types can also be expressed in Scala, but they are written differently.
   Consider these two classes, Outer and Inner :

   #+BEGIN_SRC scala
     class Outer {
       class Inner
     }
   #+END_SRC
** Structural subtyping
   When a class inherits from another, the first class is said to be a nominal subtype of the other one.
   Scala additionally supports structural subtyping, where you get a subtyping relationship simply because two types have the same members. To get structural subtyping in Scala, use Scala’s refinement types.
   Nominal subtyping is usually more convenient, so you should try nominal types first with any new design.
   
   Nonetheless, structural subtyping has its own advantages.
   1. One is that sometimes there really is no more to a type than its members.
      Instead of defining AnimalThatEatsGrass , you can use a refinement type.

      #+BEGIN_SRC scala
        Animal { type SuitableFood = Grass }
        
        // Given this type, you can now write the pasture class like this:
        class Pasture {
            var animals: List[Animal { type SuitableFood = Grass }] = Nil
            // ...
        }
      #+END_SRC
   2. Another place structural subtyping is helpful is if you want to group together a number of classes that were written by someone else.

      #+BEGIN_SRC scala
        using(new PrintWriter("date.txt")) { writer =>
          writer.println(new Date)
        }
        
        using(serverSocket.accept()) { socket =>
          socket.getOutputStream().write("hello, world\n".getBytes)
        }
        
        // Implementing using is mostly straightforward. The method performs an operation and then closes an object, Here is a first try at implementing this method:(wrong)
        def using[T, S](obj: T)(operation: T => S) = {
            val result = operation(obj)
            obj.close() // type error!
            result
        }
        
        // Here’s a complete working definition:
        def using[T <: { def close(): Unit }, S](obj: T)
          (operation: T => S) = {
                val result = operation(obj)
                obj.close()
                result
        }
      #+END_SRC
** Enumerations
   There’s a class in its standard library, scala.Enumeration . To create a new enumeration, you define an object that extends this class.

   #+BEGIN_SRC scala
     object Color extends Enumeration {
         val Red = Value
         val Green = Value
         val Blue = Value
     }
     
     object Color extends Enumeration {
         val Red, Green, Blue = Value
     }
     
     // You could also import everything in Color with:
     import Color._
     
     // ou can associate names with enumeration values by using a different overloaded variant of the Value method:
     object Direction extends Enumeration {
         val North = Value("North")
         val East = Value("East")
         val South = Value("South")
         val West = Value("West")
     }
     
     scala> for (d <- Direction.values) print(d +" ")
     North East South West
     
     scala> Direction.East.id
     res14: Int = 1
     
     scala> Direction(1)
     res15: Direction.Value = East
   #+END_SRC
