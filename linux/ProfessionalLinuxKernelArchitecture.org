* 内核数据结构
** 链表
linux 内核的标准链表是环形双向链表. 
如果要随机访问数据, 一般不适用链表.
适用链表的理想情况是: 需要便利所有的数据或需要动态加入和删除数据时.
*** 单向链表
    #+BEGIN_SRC C++
      struct list_element {
        void *data;
        struct list_element *next;
      }
    #+END_SRC

*** 双向链表
    #+BEGIN_SRC C++
      struct list_element {
        void *data;
        struct list_element *next;
        struct list_element *prev;
      }
    #+END_SRC
** 队列
** 映射
** 二叉树
*** 环形链表
* 第 1 章 简介和概述 
** 内核的任务 
** 实现策略 
** 内核的组成部分 
1.3.1 进程、进程切换、调度 
1.3.2 UNIX 进程
unix 操作系统总有两种创建新进程的机制：fork 和 exec.
Linux 用 clone 方法创建线程.
1.3.3 地址空间与特权级别 
linux 将虚拟地址空间划分为两个部分: 内核空间和用户空间. 用户状态禁止访问内核空间.
在 32 位系统中,内核空间有 1G 可用, 每个进程的虚拟地址空间是 3GB
内核可以由异步硬件中断激活, 然后在中断上下文运行, 中断上下文中运行不能访问虚拟地址空间中的用户空间部分(因为中断发生时, 可能任一用户进程处于活动状态)
除普通进程, 系统总还有内核线程在运行, 内核线程更像是普通的用户层应用程序.
在 ps 命令中置于方括号内的都是内核线程.
内核和 CPU 必须考虑如何将实际可用的物理内存映射到虚拟地址空间的区域.
不同进程的同一虚拟地址实际上具有不同的含义.
内核负责将虚拟地址空间映射到物理地址空间, 因此可以决定哪些内存区域在进程之间共享, 哪些不共享.
1.3.4 页表 
用来将虚拟地址空间映射到物理地址空间的数据结构称为页表. 两个地址关联最容易的方法是使用数组, 对虚拟地址空间中的每一页, 都分配一个数组项. 可以使用功能相同, 但是内存用的少的模型: 多级分页(linux 采用四级分页).
虚拟地址的四部分: 1. 全局页目录(PGD), 2. 中间页目录(PMD), 3. 页表或页目录(PTE), 4. 偏移量(它指定了页内部的一个字节位置).
映射可以将任意来源的数据传输到进程的虚拟地址空间中. 作为映射目标的地址空间区域, 可以像普通内存那样用通常的方法访问, 但任何修改都会自动传输到原数据源. 这样就可以用相同的函数处理完全不同的目标对象.
1.3.5 物理内存的分配 
1.3.6 计时 
1.3.7 系统调用 
系统调用是用户进程与内核交互的经典方法.
传统的系统调用按不同的类别分组:
- 进程管理 :: 创建新进程, 查询信息, 调试.
- 信号 :: 发送信号,定时器以及相关处理机制.
- 文件 ::
- 目录和文件系统 ::
- 保护机制 ::
- 定时器函数 ::
对所有处理器来说, 一个共同点是: 用户进程要从用户状态切换到核心态,并将系统关键任务委派给内核执行, 系统调用是必经之路.   
1.3.8 设备驱动程序、块设备和字符设备 
外设可以分为一下两类:
- 字符设备 :: 提供连续的数据流, 通常不支持随机存取. 比如调制解调器.
- 块设备 :: 可以随机访问设备数据, 数据只能以块的倍数进行. 比如硬盘.
1.3.9 网络 
为支持通过文件接口处理网络连接, linux 使用了源于 BSD 的套接字抽象, 套接字可看做应用程序,文件接口,内核的网络实现之间的代理.
1.3.10 文件系统 
内核提供一个额外的软件层, 将各种底层文件系统的具体特性与应用层隔离开来. 该软件层称为 VFS(Virtual FileSystem, 虚拟文件系统), VFS 即使向下接口(所有的文件系统必须实现), 也是向上接口(用户进程通过系统调用最终能够访问文件系统功能)
1.3.11 模块和热插拔 
1.3.12 缓存 
1.3.13 链表处理 
1.3.14 对象管理和引用计数 
1.3.15 数据类型 
1.3.16 本书的局限性 
** 为什么内核是特别的 
* 第 2 章 进程管理和调度
** 2.1 进程优先级 
实时进程， 非实时进程。
硬实时(有严格时间限制)， 软实时
** 2.2 进程生命周期 
运行， 等待， 睡眠， 终止。
僵尸进程产生的原因：1. 程序必须由一个进程或者一个用户杀死，2. 进程的父进程在子进程终止时必须调用或者已经调用 wait4 系统调用。只有当第一个条件发生， 而第二个条件不成立的时候才会出现僵尸状态。
** 2.3 进程表示 
2.3.1 进程类型 
2.3.2 命名空间 
2.3.3 进程 ID 号 
2.3.4 进程关系 
** 2.4 进程管理相关的系统调用
2.4.1 进程复制 
  1. fork 重量级
  2. vfork 不具有优势， 尽量不 要用
  3. clone 产生线程。

  写时复制。

2.4.2 内核线程 
2.4.3 启动新程序 
2.4.4 退出进程 
** 2.5 调度器的实现 
2.5.1 概观 
  schedule 是理解调度操作的起点.
  调度器是通过就绪队列(一个按时间排序的红黑树)记录哪个进程已经等待了多长时间. 出了红黑树, 就绪队列还配备虚拟时钟, 该时钟的时间流逝慢于实际时钟.
  就绪的虚拟时间由 fair_clock 给出, 等待时间由 wait_runtime 给出, 排序红黑树上的进程使用差值 fair_clock - wait_runtime.

2.5.2 数据结构 
2.5.3 处理优先级 
2.5.4 核心调度器 
** 2.6 完全公平调度类 
2.6.1 数据结构 
2.6.2 CFS 操作 
2.6.3 队列操作 
2.6.4 选择下一个进程 
2.6.5 处理周期性调度器 
2.6.6 唤醒抢占 
2.6.7 处理新进程 
** 2.7 实时调度类 
2.7.1 性质 
2.7.2 数据结构 
2.7.3 调度器操作 
** 2.8 调度器增强 
2.8.1 SMP 调度 
2.8.2 调度域和控制组 
2.8.3 内核抢占和低延迟相关工作 
2.9 小结 
* 第 3 章 内存管理
3.1 概述 
3.2 (N)UMA 模型中的内存组织 
3.2.1 概述 
3.2.2 数据结构 
3.3 页表 
3.3.1 数据结构 
3.3.2 页表项的创建和操作 
3.4 初始化内存管理 
3.4.1 建立数据结构 
3.4.2 特定于体系结构的设置 
3.4.3 启动过程期间的内存管理 
3.5 物理内存的管理 
3.5.1 伙伴系统的结构 
3.5.2 避免碎片 
3.5.3 初始化内存域和结点数据结构 
3.5.4 分配器 API 
3.5.5 分配页 
3.5.6 释放页 
3.5.7 内核中不连续页的分配 
3.5.8 内核映射 
3.6 slab 分配器 
3.6.1 备选分配器 
3.6.2 内核中的内存管理 
3.6.3 slab 分配的原理 
3.6.4 实现 
3.6.5 通用缓存 
3.7 处理器高速缓存和 TLB 控制 
3.8 小结 
* 第 4 章 进程虚拟内存
4.1 简介 
4.2 进程虚拟地址空间 
4.2.1 进程地址空间的布局 
4.2.2 建立布局 
4.3 内存映射的原理 
4.4 数据结构 
4.4.1 树和链表 
4.4.2 虚拟内存区域的表示 
4.4.3 优先查找树 
4.5 对区域的操作 
4.5.1 将虚拟地址关联到区域 
4.5.2 区域合并 
4.5.3 插入区域 
4.5.4 创建区域 
4.6 地址空间 
4.7 内存映射 
4.7.1 创建映射 
4.7.2 删除映射 
4.7.3 非线性映射 
4.8 反向映射 
4.8.1 数据结构 
4.8.2 建立逆向映射 
4.8.3 使用逆向映射 
4.9 堆的管理 
4.10 缺页异常的处理 
4.11 用户空间缺页异常的校正 
4.11.1 按需分配/调页 
4.11.2 匿名页 
4.11.3 写时复制 
4.11.4 获取非线性映射 
4.12 内核缺页异常 
4.13 在内核和用户空间之间复制数据 
4.14 小结 
* 第 5 章 锁与进程间通信
* 第 6 章 设备驱动程序
* 第 7 章 模块
* 第 8 章 虚拟文件系统 
* 第 9 章 Ext 文件系统族 
* 第 10 章 无持久存储的文件系统 
* 第 11 章 扩展属性和访问控制表 
* 第 12 章 网络 
* 第 13 章 系统调用
* 第 14 章 内核活动 
* 第 15 章 时间管理 
* 第 16 章 页缓存和块缓存
* 第 17 章 数据同步
* 第 18 章 页面回收和页交换 
* 第 19 章 审计 
* 附录 A 体系结构相关知识 
* 附录 B 使用源代码 
* 附录 C 有关 C 语言的注记 
* 附录 D 系统启动 
* 附录 E ELF 二进制格式 
* 附录 F 内核开发过程 
* c language
** What does 'unsigned temp:3' in a struct or union mean?
This construct specifies the length in bits for each field.

The advantage of this is that you can control the sizeof(op), if you're careful. the size of the structure will be the sum of the sizes of the fields inside.

In your case, size of op is 32 bits (that is, sizeof(op) is 4).

The size always gets rounded up to the next multiple of 8 for every group of unsigned xxx:yy; construct.

That means:

#+BEGIN_SRC C
  struct A
  {
    unsigned a: 4;    //  4 bits
    unsigned b: 4;    // +4 bits, same group, (4+4 is rounded to 8 bits)
    unsigned char c;  // +8 bits
  };
  //                    sizeof(A) = 2 (16 bits)

  struct B
  {
    unsigned a: 4;    //  4 bits
    unsigned b: 1;    // +1 bit, same group, (4+1 is rounded to 8 bits)
    unsigned char c;  // +8 bits
    unsigned d: 7;    // + 7 bits
  };
  //                    sizeof(B) = 3 (4+1 rounded to 8 + 8 + 7 = 23, rounded to 24)
#+END_SRC
** what does __rcu stands for in linux?
Read-copy-update is an algorithm that enables concurrent access to readers of a data structure without having to lock the structure. It can be read about here.

If the kernel is built with the CONFIG_SPARSE_RCU_POINTER config option, __rcu is defined in include/linux/compiler.h as

# define __rcu          __attribute__((noderef, address_space(4)))
This is an annotation for a the Sparse code analysis tool that can warn about certain things the programmer may have overlooked. How this is relevant to RCU is explained in Documentation/RCU/checklist.txt:

__rcu sparse checks: tag the pointer to the RCU-protected data structure with __rcu, and sparse will warn you if you access that pointer without the services of one of the variants of rcu_dereference().
rcu_dereference() returns a pointer that can be safely dereferenced by the code and documents the programmer's intention to protect the pointer with the RCU mechanism, enabling tools like Sparse to check for programming errors and omissions.
[[https://www.ibm.com/developerworks/cn/linux/l-rcu/][Linux 2.6 内核中新的锁机制--RCU]]
** What are the implications of the linux __user macro?

   #+BEGIN_SRC C
     # define __user         __attribute__((noderef, address_space(1)))
   #+END_SRC
It allows tools like sparse to tell kernel developers that they're possibly using an untrusted pointer (or a pointer that may be invalid in the current virtual address mapping) improperly.
** unoin
   [[http://c.biancheng.net/cpp/html/2932.html][C 语言共用体（Union）]]
结构体和共用体的区别在于：结构体的各个成员会占用不同的内存，互相之间没有影响；而共用体的所有成员占用同一段内存，修改一个成员会影响其余所有成员。
1、union 中可以定义多个成员，union 的大小由最大的成员的大小决定。 
2、union 成员共享同一块大小的内存，一次只能使用其中的一个成员。 
3、对某一个成员赋值，会覆盖其他成员的值（也不奇怪，因为他们共享一块内存。但前提是成员所占字节数相同，当成员所占字节数不同时只会覆盖相应字节上的值，比如对 char 成员赋值就不会把整个 int 成员覆盖掉，因为 char 只占一个字节，而 int 占四个字节）
4、联合体 union 的存放顺序是所有成员都从低地址开始存放的。
** What means the dot before variable name in struct?

   #+BEGIN_SRC C
     /* Why is there a dot before the variable name? */
     static struct tty_operations serial_ops = {
       .open = tiny_open,
       .close = tiny_close,
       .write = tiny_write,
       .write_room = tiny_write_room,
       .set_termios = tiny_set_termios,
     };
   #+END_SRC

   [[http://gcc.gnu.org/onlinedocs/gcc/Designated-Inits.html][Designated Initializers]]

   #+BEGIN_SRC C
     struct point { int x, y; };

     struct point p = { .y = yvalue, .x = xvalue };
     /* is equivalent to */
     struct point p = { xvalue, yvalue };
   #+END_SRC
