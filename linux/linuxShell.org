* grep, find 查询
[[http://man.linuxde.net/grep][grep 命令]]

** find 
chmod  -w `find . -type f`  # 将目录下文件去掉写权限, 可能出现 argument list too long: chmod
find . -type f -print0 | xargs -0 chmod -w  # 将目录下文件去掉写权限
find . -type f -print0 | xargs -0 chmod +w  # 将目录下文件去掉写权限

find . -name ***
find . -name '*.sql'
find . -name '*.sql' -o -name '*.sh'
** grep
*** 不以某个开头
    grep "^[^/]/"    不以/开头
*** 在多级目录中对文本进行递归搜索：
grep "text" . -r -n
# .表示当前目录。

忽略匹配样式中的字符大小写：
echo "hello world" | grep -i "HELLO"
hello

*** 在 grep 搜索结果中包括或者排除指定文件：
#只在目录中所有的.php 和.html 文件中递归搜索字符"main()"
grep -Ri "main()" .  --include "*.php" --include "*.html"

#在搜索结果中排除所有 README 文件
grep "main()" . -r --exclude "README"

#在搜索结果中排除 filelist 文件列表里的文件
grep "main()" . -r --exclude-from filelist

grep "text" . -r -n
# .表示当前目录。
* du：查询文件或文件夹的磁盘使用空间
** mac
   du -h -s 1 .
** linux
   [root@bsso yayu]# du -h --max-depth=1 work/testing
   27M     work/testing/logs
   35M     work/testing

   [root@bsso yayu]# du -h --max-depth=1 work/testing/*
   8.0K    work/testing/func.php
   27M     work/testing/logs
   8.1M    work/testing/nohup.out
   8.0K    work/testing/testing_c.php
   12K     work/testing/testing_func_reg.php
   8.0K    work/testing/testing_get.php
   8.0K    work/testing/testing_g.php
   8.0K    work/testing/var.php

   [root@bsso yayu]# du -h --max-depth=1 work/testing/logs/
   27M     work/testing/logs/

   [root@bsso yayu]# du -h --max-depth=1 work/testing/logs/*
   24K     work/testing/logs/errdate.log_show.log
   8.0K    work/testing/logs/pertime_show.log
   27M     work/testing/logs/show.log


   查看 linux 文件目录的大小和文件夹包含的文件数
     统计总数大小
     du -sh xmldb/
     du -sm * | sort -n //统计当前目录大小 并安大小 排序
     du -sk * | sort -n
     du -sk * | grep guojf //看一个人的大小
     du -m | cut -d "/" -f 2 //看第二个/ 字符前的文字
     查看此文件夹有多少文件 /*/*/* 有多少文件
     du xmldb/
     du xmldb/*/*/* |wc -l
     40752
     解释：
     wc [-lmw]
     参数说明：
     -l :多少行
     -m:多少字符
     -w:多少字
* if 判断 
** 条件表达式
*** 文件表达式
if [ -f  file ]    如果文件存在
if [ -d ...   ]    如果目录存在
if [ -s file  ]    如果文件存在且非空 
if [ -r file  ]    如果文件存在且可读
if [ -w file  ]    如果文件存在且可写
if [ -x file  ]    如果文件存在且可执行   
*** 整数变量表达式
if [ int1 -eq int2 ]    如果 int1 等于 int2   
if [ int1 -ne int2 ]    如果不等于    
if [ int1 -ge int2 ]       如果>=
if [ int1 -gt int2 ]       如果>
if [ int1 -le int2 ]       如果<=
if [ int1 -lt int2 ]       如果<
   
*** 字符串变量表达式
If  [ $a = $b ]                 如果 string1 等于 string2
                                字符串允许使用赋值号做等号
if  [ $string1 !=  $string2 ]   如果 string1 不等于 string2       
if  [ -n $string  ]             如果 string 非空(非 0），返回 0(true)  
if  [ -z $string  ]             如果 string 为空
if  [ $sting ]                  如果 string 非空，返回 0 (和-n 类似)

* 数组操作
** 定义数组

在 Shell 中，用括号来表示数组，数组元素用“空格”符号分割开。定义数组的一般形式为：
    array_name=(value1 ... valuen)
例如：
array_name=(value0 value1 value2 value3)
或者
array_name=(
value0
value1
value2
value3
)

还可以单独定义数组的各个分量：
array_name[0]=value0
array_name[1]=value1
array_name[2]=value2
可以不使用连续的下标，而且下标的范围没有限制。
** 读取数组

读取数组元素值的一般格式是：
    ${array_name[index]}
例如：
valuen=${array_name[2]}
举个例子：
#!/bin/sh
NAME[0]="Zara"
NAME[1]="Qadir"
NAME[2]="Mahnaz"
NAME[3]="Ayan"
NAME[4]="Daisy"
echo "First Index: ${NAME[0]}"
echo "Second Index: ${NAME[1]}"
运行脚本，输出：
$./test.sh
First Index: Zara
Second Index: Qadir
** 使用@ 或 * 可以获取数组中的所有元素，例如：
${array_name[*]}
${array_name[@]}
举个例子：
#!/bin/sh
NAME[0]="Zara"
NAME[1]="Qadir"
NAME[2]="Mahnaz"
NAME[3]="Ayan"
NAME[4]="Daisy"
echo "First Method: ${NAME[*]}"
echo "Second Method: ${NAME[@]}"
运行脚本，输出：
$./test.sh
First Method: Zara Qadir Mahnaz Ayan Daisy
Second Method: Zara Qadir Mahnaz Ayan Daisy
获取数组的长度

**  #获取数组长度的方法与获取字符串长度的方法相同，例如：


纯文本复制
# 取得数组元素的个数
length=${#array_name[@]}
# 或者
length=${#array_name[*]}
# 取得数组单个元素的长度
lengthn=${#array_name[n]}
** 判断是否满足某些模式

   #+BEGIN_SRC sh
     var=45-435-345-345
     if [ $(echo $var | egrep '^[0-9|-]*$') ]; then
         echo "yes"
     else
         echo "no"
     fi
   #+END_SRC

* split 切割文件
5000 行切割，制定前缀，后边随机六位数字

split -l 5000 file.bcp -d -a 6 file
* 批量修改文件名
find . -name "file*" | xargs -i -t mv {} {}.bak


