* 可扩展语言
边设计边 施工有两个重要的后果： 程序可以花更少的时间去写， 因为当你把计划和实际动手写放在一起的时候， 你总可以把精力集中在一个实际的程序上； 然后让它变得日益完善， 因为最终的设计必定是进化的成果。只要在把握你程序的命运时坚持一个原则： 一旦定位错误的地方， 就立即重写它， 那么最终的产品将会比事先你花几个星期的时间精心设计的结果更加优雅。
* 函数
动态作用域， 词法作用域。

labels 与 let, defun 关键字的区别及应用。 
* 函数式编程
事实上有经验的 Lisp 程序员会尽量让他们的程序易于测试:
1. 他们试图把副作用分离到个别函数里， 以便程序中更多的部分可以写成纯函数式风格。
2. 如果一个函数必须产生副作用， 他们至少会想办法给它设计一个函数式的接口。
3. 他们给每个函数赋予一个单一的， 定义良好的功能。
* 实用函数
一个实用工具通常至少要被使用两到三次才值得引入， 但在小程序里, 如果一个实用工具用得太少的话， 可能就没有必要包含它了。
* 函数作为返回值
* 函数作为表达式
闭包有三个有用的特性： 它是动态的， 拥有局部状态， 而且我们可以创建闭包的多个实例。
* 宏


