* vim 列操作
  - ctrl-v :: 进入纵向编辑模式
  
** 示例 1：纵向编辑在批量修改代码的应用演示
     将数列：
      10.1.5.214 
      10.1.5.212 
      10.1.5.210
     编辑成序列：
      ping -c 4 10.5.5.214 >> result0 
      ping -c 4 10.5.5.212 >> result0 
      ping -c 4 10.5.5.210 >> result0
     这是一个将 IP 数列修改成可执行的 ping 命令序列的过程。
** 第一步：修改
     将 IP 数列中第二段所有数字“1” 修改为“5”：
     将游标定位第一个行 IP 地址第二段的“1”
     ctrl-v 进入纵向编辑模式
     G 移动游标到最后一行，可视块覆盖所要修改的列
     r 进入修改模式
     5 输入数字“5”
     ESC 退出纵向编辑模式，同时所有被选中的数字都被改成了“5”，并回到命令模式
     结果如下：
      10.5.5.214 
      10.5.5.212 
      10.5.5.210
** 第二步：前添加
     在所有行之前添加“ping – c 4 ”：
     将游标定位到第一行第一列
     ctrl-v 进入纵向编辑模式
     G 移动游标到最后一行第一列，可视块覆盖了第一列
     I 进入行首插入模式
     ping -c 4 输入所要求字符“ping – c 4 ”
     ESC 退出纵向编辑模式的同时所有选中的字符前都添加了“ping – c 4 ”，回到命令模式
     结果如下：
      ping -c 4 10.5.5.214 
      ping -c 4 10.5.5.212 
      ping -c 4 10.5.5.210
** 第三步：后添加
     在所有行之后添加“>> result0”：
     将游标定位到第一行最后一列
     ctrl-v 进入纵向编辑模式
     G 移动游标到最后一行最后一列，VISUAL 　 BLOCK 　覆盖了最后一列
     A 进入行尾插入模式
     >> result	输入所要求字符“>> result0”
     ESC 退出纵向编辑模式的同时所有选中的字符后都添加了“ >> result0”，回到命令模式
     结果如下：
      ping -c 4 10.5.5.214 >> result0 
      ping -c 4 10.5.5.212 >> result0 
      ping -c 4 10.5.5.210 >> result0
* vim highlight html
1. set in .vimrc
    You can also put this into your .vimrc :
    au BufReadPost *.html set syntax=html
2. set in buffer
   :set syntax=html
* vim replace
  语法为 :[addr]s/源字符串/目的字符串/[option]

  *[addr] 表示检索范围，省略时表示当前行。* \\
     全局替换命令为：:%s/源字符串/目的字符串/g  \\
      “%” ：表示整个文件，同“1,$”；  \\
      “. ,$” ：从当前行到文件尾；  

  *[option] : 表示操作类型*  \\
        如：g 表示全局替换;  \\
        c 表示进行确认  \\
        p 表示替代结果逐行显示（Ctrl + L 恢复屏幕）；  \\
        省略 option 时仅对每行第一个匹配串进行替换；                 \\
        如果在源字符串和目的字符串中出现特殊字符，需要用”\”转义
* vim 快捷键
vim 快捷键选中一个单词： 按 *
* windows 文件传到 linux 需要的处理
1. 用 vim 打开， 然后 set fileformat=unix

下边的不必须 set fileecoding=utf-8
* vim tab to space
:set expandtab

:retab
* vim 格式化代码
  1. 选中代码
  2. 用=来格式化代码
* vim 修改语法高亮 :set syntax=sql
* 删除标记内部的文字
  当我开始使用 Vim 时，一件我总是想很方便做的事情是如何轻松的删除方括号或圆括号里的内容。转到开始的标记，然后使用下面的语法：
  di[标记]

  比如，把光标放在开始的圆括号上，使用下面的命令来删除圆括号内的文字：
  di(

  如果是方括号或者是引号，则使用：
  di{

  和：
  di&quot;
* 把光标下的文字置于屏幕中央
  我们所要做的事情如标题所示。如果你想强制滚动屏幕来把光标下的文字置于屏幕的中央，在可视模式中使用命令（译者注：在普通模式中也可以）：
  zz
* 跳到上一个／下一个位置
  当你编辑一个很大的文件时，经常要做的事是在某处进行修改，然后跳到另外一处。如果你想跳回之前修改的地方，使用命令：
  Ctrl+o
  来回到之前修改的地方
  类似的：
  Ctrl+i
* vim set
1. :set ignorecase
* https://github.com/amix/vimrc 快捷键
The leader is ,, so whenever you see <leader> it means ,.
** Plugin related mappings

 Open bufexplorer to see and manage the current buffers (<leader>o):

 map <leader>o :BufExplorer<cr>
 Open MRU.vim to see the recently open files (<leader>f):

 map <leader>f :MRU<CR>
 Open ctrlp.vim plugin to quickly find a file or a buffer (<leader>j or <ctrl>f):

 let g:ctrlp_map = '<c-f>'
 NERD Tree mappings:

 map <leader>nn :NERDTreeToggle<cr>
 map <leader>nb :NERDTreeFromBookmark 
 map <leader>nf :NERDTreeFind<cr>
 goyo.vim and vim-zenroom2 lets you only focus on one thing at a time. It removes all the distractions and centers the content. It has a special look when editing Markdown, reStructuredText and textfiles. It only has one mapping. (<leader>z)

 map <leader>z :Goyo<cr>
** Normal mode mappings

 Fast saving of a buffer (<leader>w):

 nmap <leader>w :w!<cr>
 Map <Space> to / (search) and <Ctrl>+<Space> to ? (backwards search):

 map <space> /
 map <c-space> ?
 map <silent> <leader><cr> :noh<cr>
 Disable highlights when you press <leader><cr>:

 map <silent> <leader><cr> :noh<cr>

 Smart way to move between windows (<ctrl>j etc.):

 map <C-j> <C-W>j
 map <C-k> <C-W>k
 map <C-h> <C-W>h
 map <C-l> <C-W>l
 Closing of the current buffer(s) (<leader>bd and (<leader>ba)):

 " Close current buffer
 map <leader>bd :Bclose<cr>

 " Close all buffers
 map <leader>ba :1,1000 bd!<cr>
 Useful mappings for managing tabs:

 map <leader>tn :tabnew<cr>
 map <leader>to :tabonly<cr>
 map <leader>tc :tabclose<cr>
 map <leader>tm :tabmove 

 " Opens a new tab with the current buffer's path
 " Super useful when editing files in the same directory
 map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/
 Switch CWD to the directory of the open buffer:

 map <leader>cd :cd %:p:h<cr>:pwd<cr>
 Open ack.vim for fast search:

 map <leader>g :Ack 
 Quickly open a buffer for scripbble:

 map <leader>q :e ~/buffer<cr>
 Toggle paste mode on and off:

 map <leader>pp :setlocal paste!<cr>
** Visual mode mappings

 Visual mode pressing * or # searches for the current selection:

 vnoremap <silent> * :call VisualSelection('f')<CR>
 vnoremap <silent> # :call VisualSelection('b')<CR>
 When you press gv you Ack.vim after the selected text:

 vnoremap <silent> gv :call VisualSelection('gv', '')<CR>
 When you press <leader>r you can search and replace the selected text:

 vnoremap <silent> <leader>r :call VisualSelection('replace')<CR>
 Surround the visual selection in parenthesis/brackets/etc.:

 vnoremap $1 <esc>`>a)<esc>`<i(<esc>
 vnoremap $2 <esc>`>a]<esc>`<i[<esc>
 vnoremap $3 <esc>`>a}<esc>`<i{<esc>
 vnoremap $$ <esc>`>a"<esc>`<i"<esc>
 vnoremap $q <esc>`>a'<esc>`<i'<esc>
 vnoremap $e <esc>`>a"<esc>`<i"<esc>
** Insert mode mappings

 Quickly insert parenthesis/brackets/etc.:

 inoremap $1 ()<esc>i
 inoremap $2 []<esc>i
 inoremap $3 {}<esc>i
 inoremap $4 {<esc>o}<esc>O
 inoremap $q ''<esc>i
 inoremap $e ""<esc>i
 inoremap $t <><esc>i
 Insert the current date and time (useful for timestamps):

 iab xdate <c-r>=strftime("%d/%m/%y %H:%M:%S")<cr>
** Command line mappings

 $q is super useful when browsing on the command line. It deletes everything until the last slash:

 cno $q <C-\>eDeleteTillSlash()<cr>
 Bash like keys for the command line:

 cnoremap <C-A>		<Home>
 cnoremap <C-E>		<End>
 cnoremap <C-K>		<C-U>

 cnoremap <C-P> <Up>
 cnoremap <C-N> <Down>
 Write the file as sudo (works only on Unix). Super useful when you open a file and you don't have permissions to save your changes. Vim tip:

 :W 
** Spell checking

 Pressing <leader>ss will toggle spell checking:

 map <leader>ss :setlocal spell!<cr>
 Shortcuts using <leader> instead of special characters:

 map <leader>sn ]s
 map <leader>sp [s
 map <leader>sa zg
 map <leader>s? z=
** Cope

 Query :help cope if you are unsure what cope is. It's super useful!

 When you search with Ack.vim, display your results in cope by doing: <leader>cc

 To go to the next search result do: <leader>n

 To go to the previous search results do: <leader>p

 Cope mappings:

 map <leader>cc :botright cope<cr>
 map <leader>co ggVGy:tabnew<cr>:set syntax=qf<cr>pgg
 map <leader>n :cn<cr>
 map <leader>p :cp<cr>

