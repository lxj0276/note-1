程序调用自身的编程技巧称为递归（ recursion）。	
	一般来说，递归需要有边界条件、递归前进段和递归返回段。当边界条件不满足时，递归前进；当边界条件满足时，递归返回。
	注意：（限定条件，注意递归的次数，避免内存溢出）    
	  (1) 递归就是在过程或函数里调用自身;    
	  (2) 在使用递归策略时，必须有一个明确的递归结束条件，称为递归出口。   
	  
	递归算法一般用于解决三类问题：   
	  (1)数据的定义是按递归定义的。(Fibonacci函数)   
	  (2)问题解法按递归算法实现。(回溯)   
	  (3)数据的结构形式是按递归定义的。(树的遍历，图的搜索)   
	  递归的缺点：   
	  递归算法解题的运行效率较低。在递归调用的过程当中系统为每一层的返回点、局部量等开辟了栈来存储。
		递归次数过多容易造成栈溢出等。
		
迭代算法：
	让计算机对一组指令（或一定步骤）进行重复执行，在每次执行这组指令（或这些步骤）时，都从变量的原值推出它的一个新值。
		一、确定迭代变量。在可以用迭代算法解决的问题中，至少存在一个直接或间接地不断由旧值递推出新值的变量，这个变量就是迭代变量。   
		二、建立迭代关系式。所谓迭代关系式，指如何从变量的前一个值推出其下一个值的公式（或关系）。迭代关系式的建立是解决迭代问题的关键，
			通常可以使用递推或倒推的方法来完成。  
		三、对迭代过程进行控制。在什么时候结束迭代过程？这是编写迭代程序必须考虑的问题。
			迭代过程的控制通常可分为两种情况：
				一种是所需的迭代次数是个确定的值，可以计算出来；
				另一种是所需的迭代次数无法确定。对于前一种情况，可以构建一个固定次数的循环来实现对迭代过程的控制；
					对于后一种情况，需要进一步分析出用来结束迭代过程的条件
	
	
	
	
	