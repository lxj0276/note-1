抽象类：
	当多个类中出现相同功能，但是功能主体不同，可以向上抽取。这时，只抽取功能定义，而不抽取功能主题。
	抽象类的特点：
		1：抽象方法只能定义在抽象类中，抽象类和抽象方法必须由abstract关键字修饰（可以描述类和方法，不可以描述变量）。
		2：抽象方法只定义方法声明，并不定义方法实现。
		3：抽象类不可以被创建对象(实例化)。
		4：只有通过子类继承抽象类并覆盖了抽象类中的所有抽象方法后，该子类才可以实例化。否则，该子类还是一个抽象类。
		5: 抽象类只能单继承。
		抽象类中可以不定义抽象方法。
	抽象关键字abstract和哪些不可以共存？final , private , static
	抽象类和一般类的区别：比一般类多了一个抽象函数。而且比一般类少了一个创建对象的部分。
	
抽象类和接口的区别：(问的比较多,概念性的问题)
	1：抽象类只能被继承，而且只能单继承。
		接口需要被实现，而且可以多实现。
	2：抽象类中可以定义非抽象方法，子类可以直接继承使用。
		接口中都有抽象方法，需要子类去实现。
	3：抽象类使用的是 is a 关系。
		接口使用的 like a 关系。
	4：抽象类的成员修饰符可以自定义。
		接口中的成员修饰符是固定的。全都是public的。

模板方法：在定义功能时，功能的一部分是确定的，但是有一部分是不确定的，而确定的部分在使用不确定的部分，
		那么这时就将不确定的部分暴露出去，由该类的子类去完成，可以定义成抽象的，但是不一定是抽象的 。
	
接口(interface)：
	接口定义特点：
		1、接口中常见定义：常量，抽象方法。
		2、接口中成员有固定修饰符，如果不写则给补上。
			常量:public static final.
			方法：public abstract.
	接口中的成员都是public。
	接口不能创建对象，因为有抽象方法。
	子类必须对接口中的抽象方法全部覆盖后，子类才可以实例化。否则，子类是一个抽象类。
	接口的特点：
		接口是对外暴露的规则。
		接口是程序的功能扩展。
		接口可以被多实现。
		类与接口之间是实现关系，一个类可以继承一个类的同时实现多个接口。
		接口间可以有继承关系：即interface B extends A 。 或者interface C extends B,A 。只有在接口与接口之间存在多继承，类之间只能存在单继承。
	 基本功能写在类中，扩展功能写在接口中。