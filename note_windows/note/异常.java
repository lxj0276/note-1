
异常的处理原则：
	1、处理方式有两种： try 或者 throws
	2、调用到抛出异常的功能时，抛出几个，就处理几个。
		会出现一个try对应多个catch的情况。
	3、多个catch，父类的catch放到最下边。
	4、catch内，需要定义针对性的处理方式，不要简单的定义printStackTrace，输出语句，也不要不写。
	
throw和throws的用法：
	throw 定义在函数内，用于抛出异常对象。
	throws 定义在函数上，用于抛出异常类，可以抛出多个用逗号隔开。
	

异常在子父类覆盖中的体现：
	・子类在覆盖父类时，如果父类的方法抛出异常，那么子类的覆盖方法，只能抛出父类的异常或该异常的子类。
	・子类抛出的异常必须是父类的异常的子类或者子集。
	・如果子类或者接口的方法中没有异常抛出，那么子类在覆盖方法时，也不可以抛出异常。
		如果子类方法发生了异常，就必须要进行try处理，绝对不能抛。

异常：是对问题的描述，将问题进行对象的封装。

异常的体系：
	ThrowAble
		|--Error
		|--Exception
			|--RuntimeException
			
异常的体系特点：
	异常体系中的所有类以及建立的对象都具有可抛性。
	也就是说可以被throw和throws关键字所操作。
	只有异常体系具备这个特点。
				

当函数内容有throw抛出异常对象，并未被进行try处理，必须要再函数上声明，否则编译失败。
	注意：RuntimeException除外，也就是说，函数内如果抛出的RuntimeException异常，函数上可以不用声明。
	
如果函数声明了异常，调用者需要进行处理，处理方法可以throws可以try.

异常有两种：
	编译时被检测异常：
		该异常在编译时，如果没有处理（没有抛或者try），编译失败。
		该异常被标识，代表这可以被处理。
	运行时异常：
		在编译时，不需要处理，编译器不检查。
		该异常的发生，建议不处理，让程序停止，需要对代码进行修正。
		
异常处理语句：
	try{
		需要被检测代码
	}catch{
		处理异常代码
	}finally{
		一定会执行的代码
	}

有三个结合格式：
	1、	try{
		}catch{
		}
	2、 try{
		}catch{
		}finally{
		}
	3、 try{
		}finally{
		}

注意：
	1、finally中定义的通常是关闭资源的代码，因为资源必须释放。
	2、finally有一种情况不会执行，当执行到System.exit(0);系统退出,jvm结束，finally不会执行。
	
自定义异常：
	定义类继承Exception或者RuntimeException。
	1、为了让该自定义类具备可抛性。
	2、让该类具备操作异常的共性方法。
	
	当要定义自定义异常的信息时，可以使用父类已经定义好的功能。
	将异常信息传递给父类的构造函数。
		classMyException extends Exception{
			MyException(String message){
				super(message);
			}
		}
	
	自定义异常：按照java的面向对象思想，将程序中出现的特有问题进行封装。
	
异常的好处：
	1、将问题进行封装。
	2、将正常流程代码和问题处理代码相分离，方便阅读。
	

		当捕获到的异常本功能处理不了时，可以继承在catch中抛出。
			try {
				throw new AException();
			}catch(AException e){
				throw e;
			}
			
		如果异常处理不了，但并不属于该功能出现的异常。可以将异常转换后，在抛出和该功能相关的异常。
		或者异常可以处理，当需要将异常产生的和本功能相关的问题提供出去，当调用者知道，并处理，也可以将捕获到的异常处理后，转换成新的异常。
		try{
			throw new AException();
		}catch{
			//对AException处理。
			throw new BException();
		}

	
	
	
	
	