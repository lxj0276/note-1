#+OPTIONS: ^:nil

[[https://www.python.org/dev/peps/][Index of Python Enhancement Proposals (PEPs)]]

* 字符串转时间
dateutils 包中有很多有用的操作
** one day
t = time.strptime(date, "%Y-%m-%d")
date1 = datetime.datetime(* t[:3])
dateDel = date1 - datetime.timedelta(days=1)
dateDelStr = str(dateDel.date())
** span day
    begin = datetime.date(2015, 04, 04)
    end = datetime.date(2015, 04, 05)
    for i in range((end - begin).days+1):
        day = begin + datetime.timedelta(days=i)
        dataExport(day)
* 查看 python 文档
命令行: pydoc -p 8000
* pdb 调试
python -i -m pdb dir/src.py
* python 中单下划线和双下划线的区别
    1. _single_leading_underscore: weak "internal use" indicator. E.g. "from M import *" does not import objects whose name starts with an underscore.
    2. single_trailing_underscore_: used by convention to avoid conflicts with Python keyword, e.g.
       Tkinter.Toplevel(master, class_='ClassName')
    3. __double_leading_underscore: when naming a class attribute, invokes name mangling (inside class FooBar, __boo becomes _FooBar__boo; see below).
    4. __double_leading_and_trailing_underscore__: "magic" objects or attributes that live in user-controlled namespaces. E.g. __init__, __import__ or __file__. Never invent such names; only use them as documented.

    _xxx      不能用'from moduleimport *'导入 
    __xxx__ 系统定义名字 
    __xxx    类中的私有变量名
    
    python 默认的成员函数和成员变量都是公开的，并且没有类似别的语言的 public,private 等关键词来修饰。 在 python 中定义私有变量只需要在变量名或函数名前加上 "__"两个下划线，那么这个函数或变量就会为私有的了。 在内部，python 使用一种 name mangling 技术，将 __membername 替换成 _classname__membername，所以你在外部使用原来的私有成员的名字时，会提示找不到
** 翻译上边的英文
    首先是单下划线开头，这个被常用于模块中，在一个模块中以单下划线开头的变量和函数被默认当作内部函数，如果使用 from a_module import * 导入时，这部分变量和函数不会被导入。不过值得注意的是，如果使用 import a_module 这样导入模块，仍然可以用 a_module._some_var 这样的形式访问到这样的对象。

在 Python 的官方推荐的代码样式中，还有一种单下划线结尾的样式，这在解析时并没有特别的含义，但通常用于和 Python 关键词区分开来，比如如果我们需要一个变量叫做 class，但 class 是 Python 的关键词，就可以以单下划线结尾写作 class_。

双下划线开头的命名形式在 Python 的类成员中使用表示名字改编 (Name Mangling)，即如果有一 Test 类里有一成员 __x，那么 dir(Test) 时会看到 _Test__x 而非 __x。这是为了避免该成员的名称与子类中的名称冲突。但要注意这要求该名称末尾没有下划线。

双下划线开头双下划线结尾的是一些 Python 的“魔术”对象，如类成员的 __init__、__del__、__add__、__getitem__ 等，以及全局的 __file__、__name__ 等。Python 官方推荐永远不要将这样的命名方式应用于自己的变量或函数，而是按照文档说明来使用。

另外单下划线开头还有一种一般不会用到的情况在于使用一个 C 编写的扩展库有时会用下划线开头命名，然后使用一个去掉下划线的 Python 模块进行包装。如 struct 这个模块实际上是 C 模块 _struct 的一个 Python 包装。
* python 抽象方法
  @abstractmethod
  def A(self): pass

  #+BEGIN_SRC python
    from abc import ABCMeta, abstractmethod
    
    class Abstract(metaclass=ABCMeta):
        def use_concrete_implementation(self):
            print(self._concrete_method())
    
        @abstractmethod
        def _concrete_method(self):
            pass
    # 下边的也是抽象方法， 但是不推荐用
    #    def _concrete_method(self):
    #        raise NotImplementedError()
    class Concrete(Abstract):
        def _concrete_method(self):
            return 2 * 3
  #+END_SRC
* python decorators 类似 java 中注解
  [[http://pythoncentral.io/python-decorators-overview/][Python Decorators Overview]]
  Note the function called decorator; it takes a function as an argument and defines and returns a new function that uses the one it was passed. 
* class method, static method
  [[http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python][What is the difference between @staticmethod and @classmethod in Python?]]
  实例方法把类的实例作为第一个参数绑定到了方法中.      \\ 
  类方法把类作为第一个参数绑定到了方法中.              \\
  静态方法没有任何隐式的参数.                          \\

  #+BEGIN_SRC python
    class A(object):
        def foo(self,x):
            print "executing foo(%s,%s)"%(self,x)
    
        @classmethod
        def class_foo(cls,x):
            print "executing class_foo(%s,%s)"%(cls,x)
    
        @staticmethod
        def static_foo(x):
            print "executing static_foo(%s)"%x    
    
    a=A()
    
    a.foo(1)
    # executing foo(<__main__.A object at 0xb7dbef0c>,1)
    
    a.class_foo(1)
    # executing class_foo(<class '__main__.A'>,1)
    
    A.class_foo(1)
    # executing class_foo(<class '__main__.A'>,1)
    
    a.static_foo(1)
    # executing static_foo(1)
    
    A.static_foo('hi')
    # executing static_foo(hi)
  #+END_SRC
* 魔术方法何时调用
  [[http://www.diveintopython3.net/special-method-names.html][Special Method Names And How To Invoke]]
  [[http://pycoders-weekly-chinese.readthedocs.org/en/latest/issue6/a-guide-to-pythons-magic-methods.html][Python 魔术方法指南]]
  [[http://www.cnblogs.com/wilber2013/p/4690681.html][调用魔术方法]]
* python 设计模式
** python 实现单例
[[./codesPy/singleton.py]]
* python 正则表达式
** 正则捕获替换
*** 直接替换
#+BEGIN_SRC python
import re
msg = 'telephone string, mobile int, c double'
re.sub(r'(string|int|double)', '', msg)

#  2
re.sub(r'def\s+([a-zA-Z_][a-zA-Z_0-9]*)\s*\(\s*\):',
  r'static PyObject*\npy_\1(void)\n{',
  'def myfunc():')
'static PyObject*\npy_myfunc(void)\n{'
#+END_SRC
*** 函数替换

#+BEGIN_SRC python
import re
def encode(match):
return "{}translate({}, '1234567890X', 'Zb5c7J9d3Ck'){}".format(match.group(1),
                                                                match.group(2),
                                                                match.group(3))
msg = 'telephone string, mobile int, c double'

re.sub('([, ])(Mobile)([, ])', encode, msg)

# 2
def dashrepl(matchobj):
if matchobj.group(0) == '-': return ' '
else: return '-'
re.sub('-{1,2}', dashrepl, 'pro----gram-files')
#  'pro--gram files'
re.sub(r'\sAND\s', ' & ', 'Baked Beans And Spam', flags=re.IGNORECASE)
'Baked Beans & Spam'
>>>>>>> 908ffe1f36ea682cdc848cdb73188b4d29fef930
#+END_SRC
* 2to3  python
To translate an entire project from one directory tree to another use:
  #+BEGIN_SRC sh
    2to3 --output-dir=python3-version/mycode -W -n python2-version/mycode
  #+END_SRC
* python dataframe 完整显示

  #+BEGIN_SRC python
# -*- coding: utf-8 -*-
import numpy as np
import pandas as pd

pd.set_option('display.height', 1000)
pd.set_option('display.max_rows', 50)
pd.set_option('display.max_columns', 50)
pd.set_option('display.width', 1000)

df = pd.DataFrame(np.random.randn(1, 20))
print df
  #+END_SRC

* 添加模块到环境变量
  ~/anaconda/lib/python2.7/site-packages/stock_ays.pth
