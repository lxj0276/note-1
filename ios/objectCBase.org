* oc基础
  在方法中，一个参数对应一个冒号，参数应有相应的参数说明，冒号也是方法的一部分。

+ 定义一个类分2个文件：.h声明文件、.m实现文件 ::
 .h : 成员变量、方法的声明
 .m : 方法的实现

+ 如果想使用某一个类，只需要#import类的.h文件即可

** 方法和函数的区别
*** 方法
 1.对象方法都是以减号 -
 2.对象方法的声明必须写在@interface和@end之间
   对象方法的实现必须写在@implementation和@end之间
 3.对象方法只能由对象来调用
 4.对象方法归类\对象所有

*** 函数
 1.函数能写在文件中的任意位置(@interface和@end之间除外)，函数归文件所有
 2.函数调用不依赖于对象
 3.函数内部不能直接通过成员变量名访问某个对象的成员变量

** enum
   typedef enum{
     SexMan,  // 枚举值的取值写法为：枚举类型+值（方便读）
     SexWoman
   } sex;

** 动态检测 弱语法
   在运行时检测
   -[Person test]: unrecognized selector sent to instance 0x7fd2ea4097c0
 给Person对象发送了一个不能识别的消息：test
** @property @synthesize
@property：可以自动生成某个成员变量的setter和getter声明  \
@synthesize自动生成age的setter和getter实现，并且会访问_age这个成员变量  \
@synthesize speed = _speed; // 会访问_speed这个成员变量，如果不存在，就会再.m中自动生成@private类型的_speed变量  \
最新版本的的编译器中，@property speed 会自动生成_speed成员变量，get、set方法的声明，以及其实现。
** 分类
   分类的作用：在不改变原来类内容的基础上，可以为类增加一些方法

 使用注意：
 1. 分类只能增加方法，不能增加成员变量
 2. 分类方法实现中可以访问原来类中声明的成员变量
 3. 分类可以重新实现原来类中的方法，但是会覆盖掉原来的方法，会导致原来的方法没法再使用
 4. 方法调用的优先级：分类(最后参与编译的分类优先) --> 原来类  --> 父类
** 命名规范
*** 成员变量
    成员变量的命名规范：一定要以下划线 _ 开头
  作用：
  1.让成员变量和get方法的名称区分开
  2.可以跟局部变量区分开，一看到下划线开头的变量，一般都是成员变量
