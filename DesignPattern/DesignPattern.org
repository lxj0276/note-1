[[http://www.newthinktank.com/page/2/?s=design+pattern][newthinktank.design+pattern]]
* TODO The scenarios of design pattern
** 创建型模式
*** factory
**** 功能
1. 定义创建对象的接口， 封装了对象的创建；
2. 使得具体化类的工作延迟到了子类中。

factory 模式仅仅局限于一类类（拥有共同的基类）， 如果要为不同类的类提供一个对象创建的接口， 那就要用 AbstractFactory 了。
*** abstract factory
**** 解决的问题
要创建一组相关或者相互依赖的对象。

将一组对象的创建封装到一个用于创建对象的类中， 维护一个创建类比维护 n 多相关对象的创建要简单的多。
*** singleton
**** 解决的问题
在纯粹面向对象的范式中， 如何创建一个唯一的变量（对象）。
*** builder
**** 解决的问题
当要创建的对象很复杂的时候， 将复杂对象的创建过程和这个对象的标识分离开来。
*** prototype
** 结构型模式
*** bridge
*** adapter
*** decorator
*** composite
*** flyweight 
*** facade 
*** proxy
** 行为模式
*** template
*** strategy
*** state
*** observer
*** memento
*** command
*** visitor
*** chain of responsibility
*** iterator
*** interpreter
* design patterns
** strategy pattern
   + 定义一个接口 flys
   + 接口的两个实现类: ItFlys, CantFlys
   + 定义一个类, Has A Relationship: Animal 类中有 flyingType 属性,是 Flys 类型; 和 tryToFly(), setFlyingAbility(Flys)两个方法.
   + Animal 的两个实现类: Dog, Bird.

** Observer Pattern    
